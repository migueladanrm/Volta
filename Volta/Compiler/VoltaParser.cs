//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Source/Volta/Volta.g4\VoltaParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Volta.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class VoltaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NOT=1, QMARK=2, SQMARK=3, HASH=4, DOLAR=5, AND=6, OR=7, BL=8, BR=9, SEMICOLON=10, 
		ADD=11, ADDADD=12, SUB=13, SUBSUB=14, MUL=15, DIV=16, MDIV=17, EQUALEQUAL=18, 
		NOTEQUAL=19, GREATEREQUAL=20, LESSEQUAL=21, EQUAL=22, GREATER=23, LESS=24, 
		CURLYBL=25, CURLYBR=26, SQUAREBL=27, SQUAREBR=28, COLON=29, DOT=30, COMMA=31, 
		QUESTIONMARK=32, BREAK=33, CLASS=34, CONST=35, ELSE=36, IF=37, NEW=38, 
		READ=39, RETURN=40, VOID=41, WHILE=42, WRITE=43, TRUE=44, FALSE=45, IDENT=46, 
		NUM=47, CHARCONST=48, COMMENT=49, WS=50, FOR=51;
	public const int
		RULE_program = 0, RULE_constDecl = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_expr = 13, RULE_term = 14, RULE_factor = 15, 
		RULE_designator = 16, RULE_mulop = 17, RULE_addop = 18, RULE_relop = 19;
	public static readonly string[] ruleNames = {
		"program", "constDecl", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "statement", "block", "actPars", "condition", "condTerm", "condFact", 
		"expr", "term", "factor", "designator", "mulop", "addop", "relop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'\"'", "'''", "'#'", "'$'", "'&&'", "'||'", "'('", "')'", 
		"';'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'=='", "'!='", 
		"'>='", "'<='", "'='", "'>'", "'<'", "'{'", "'}'", "'['", "']'", "':'", 
		"'.'", "','", "'?'", "'break'", "'class'", "'const'", "'else'", "'if'", 
		"'new'", "'read'", "'return'", "'void'", "'while'", "'write'", "'true'", 
		"'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NOT", "QMARK", "SQMARK", "HASH", "DOLAR", "AND", "OR", "BL", "BR", 
		"SEMICOLON", "ADD", "ADDADD", "SUB", "SUBSUB", "MUL", "DIV", "MDIV", "EQUALEQUAL", 
		"NOTEQUAL", "GREATEREQUAL", "LESSEQUAL", "EQUAL", "GREATER", "LESS", "CURLYBL", 
		"CURLYBR", "SQUAREBL", "SQUAREBR", "COLON", "DOT", "COMMA", "QUESTIONMARK", 
		"BREAK", "CLASS", "CONST", "ELSE", "IF", "NEW", "READ", "RETURN", "VOID", 
		"WHILE", "WRITE", "TRUE", "FALSE", "IDENT", "NUM", "CHARCONST", "COMMENT", 
		"WS", "FOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VoltaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VoltaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VoltaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VoltaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(VoltaParser.CLASS, 0); }
		public ITerminalNode IDENT() { return GetToken(VoltaParser.IDENT, 0); }
		public ITerminalNode CURLYBL() { return GetToken(VoltaParser.CURLYBL, 0); }
		public ITerminalNode CURLYBR() { return GetToken(VoltaParser.CURLYBR, 0); }
		public ITerminalNode Eof() { return GetToken(VoltaParser.Eof, 0); }
		public ConstDeclContext[] constDecl() {
			return GetRuleContexts<ConstDeclContext>();
		}
		public ConstDeclContext constDecl(int i) {
			return GetRuleContext<ConstDeclContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(CLASS);
			State = 41; Match(IDENT);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << CONST) | (1L << IDENT))) != 0)) {
				{
				State = 45;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONST:
					{
					State = 42; constDecl();
					}
					break;
				case IDENT:
					{
					State = 43; varDecl();
					}
					break;
				case CLASS:
					{
					State = 44; classDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50; Match(CURLYBL);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VOID || _la==IDENT) {
				{
				{
				State = 51; methodDecl();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57; Match(CURLYBR);
			State = 58; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VoltaParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(VoltaParser.IDENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(VoltaParser.EQUAL, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public ITerminalNode NUM() { return GetToken(VoltaParser.NUM, 0); }
		public ITerminalNode CHARCONST() { return GetToken(VoltaParser.CHARCONST, 0); }
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_constDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(CONST);
			State = 61; type();
			State = 62; Match(IDENT);
			State = 63; Match(EQUAL);
			State = 64;
			_la = TokenStream.LA(1);
			if ( !(_la==NUM || _la==CHARCONST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 65; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] IDENT() { return GetTokens(VoltaParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(VoltaParser.IDENT, i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VoltaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VoltaParser.COMMA, i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; type();
			State = 68; Match(IDENT);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 69; Match(COMMA);
				State = 70; Match(IDENT);
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(VoltaParser.CLASS, 0); }
		public ITerminalNode IDENT() { return GetToken(VoltaParser.IDENT, 0); }
		public ITerminalNode CURLYBL() { return GetToken(VoltaParser.CURLYBL, 0); }
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ITerminalNode CURLYBR() { return GetToken(VoltaParser.CURLYBR, 0); }
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(CLASS);
			State = 79; Match(IDENT);
			State = 80; Match(CURLYBL);
			State = 81; varDecl();
			State = 82; Match(CURLYBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(VoltaParser.IDENT, 0); }
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(VoltaParser.VOID, 0); }
		public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 84; type();
				}
				break;
			case VOID:
				{
				State = 85; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 88; Match(IDENT);
			State = 89; Match(BL);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 90; formPars();
				}
			}

			State = 93; Match(BR);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENT) {
				{
				{
				State = 94; varDecl();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 100; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] IDENT() { return GetTokens(VoltaParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(VoltaParser.IDENT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VoltaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VoltaParser.COMMA, i);
		}
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; type();
			State = 103; Match(IDENT);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				{
				State = 104; Match(COMMA);
				}
				State = 105; type();
				State = 106; Match(IDENT);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(VoltaParser.IDENT, 0); }
		public ITerminalNode SQUAREBL() { return GetToken(VoltaParser.SQUAREBL, 0); }
		public ITerminalNode SQUAREBR() { return GetToken(VoltaParser.SQUAREBR, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(IDENT);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQUAREBL) {
				{
				State = 114; Match(SQUAREBL);
				State = 115; Match(SQUAREBR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VoltaParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VoltaParser.SEMICOLON, i);
		}
		public ITerminalNode EQUAL() { return GetToken(VoltaParser.EQUAL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public ITerminalNode ADDADD() { return GetToken(VoltaParser.ADDADD, 0); }
		public ITerminalNode SUBSUB() { return GetToken(VoltaParser.SUBSUB, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public ITerminalNode IF() { return GetToken(VoltaParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(VoltaParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(VoltaParser.FOR, 0); }
		public ITerminalNode WHILE() { return GetToken(VoltaParser.WHILE, 0); }
		public ITerminalNode BREAK() { return GetToken(VoltaParser.BREAK, 0); }
		public ITerminalNode RETURN() { return GetToken(VoltaParser.RETURN, 0); }
		public ITerminalNode READ() { return GetToken(VoltaParser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(VoltaParser.WRITE, 0); }
		public ITerminalNode COMMA() { return GetToken(VoltaParser.COMMA, 0); }
		public ITerminalNode NUM() { return GetToken(VoltaParser.NUM, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; designator();
				State = 128;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQUAL:
					{
					State = 119; Match(EQUAL);
					State = 120; expr();
					}
					break;
				case BL:
					{
					State = 121; Match(BL);
					State = 123;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BL) | (1L << SUB) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT) | (1L << NUM) | (1L << CHARCONST))) != 0)) {
						{
						State = 122; actPars();
						}
					}

					State = 125; Match(BR);
					}
					break;
				case ADDADD:
					{
					State = 126; Match(ADDADD);
					}
					break;
				case SUBSUB:
					{
					State = 127; Match(SUBSUB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 130; Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(IF);
				State = 133; Match(BL);
				State = 134; condition();
				State = 135; Match(BR);
				State = 136; statement();
				State = 139;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 137; Match(ELSE);
					State = 138; statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; Match(FOR);
				State = 142; Match(BL);
				State = 143; expr();
				State = 144; Match(SEMICOLON);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BL) | (1L << SUB) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT) | (1L << NUM) | (1L << CHARCONST))) != 0)) {
					{
					State = 145; condition();
					}
				}

				State = 148; Match(SEMICOLON);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << CURLYBL) | (1L << BREAK) | (1L << IF) | (1L << READ) | (1L << RETURN) | (1L << WHILE) | (1L << WRITE) | (1L << IDENT) | (1L << FOR))) != 0)) {
					{
					State = 149; statement();
					}
				}

				State = 152; Match(BR);
				State = 153; statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 155; Match(WHILE);
				State = 156; Match(BL);
				State = 157; condition();
				State = 158; Match(BR);
				State = 159; statement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 161; Match(BREAK);
				State = 162; Match(SEMICOLON);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 163; Match(RETURN);
				State = 165;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 164; expr();
					}
					break;
				}
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 7);
				{
				State = 167; Match(READ);
				State = 168; Match(BL);
				State = 169; designator();
				State = 170; Match(BR);
				State = 171; Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 173; Match(WRITE);
				State = 174; Match(BL);
				State = 175; expr();
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 176; Match(COMMA);
					State = 177; Match(NUM);
					}
				}

				State = 180; Match(BR);
				State = 181; Match(SEMICOLON);
				}
				break;
			case CURLYBL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 183; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 10);
				{
				State = 184; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode CURLYBL() { return GetToken(VoltaParser.CURLYBL, 0); }
		public ITerminalNode CURLYBR() { return GetToken(VoltaParser.CURLYBR, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(CURLYBL);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << CURLYBL) | (1L << BREAK) | (1L << IF) | (1L << READ) | (1L << RETURN) | (1L << WHILE) | (1L << WRITE) | (1L << IDENT) | (1L << FOR))) != 0)) {
				{
				{
				State = 188; statement();
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194; Match(CURLYBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VoltaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VoltaParser.COMMA, i);
		}
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; expr();
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 197; Match(COMMA);
				State = 198; expr();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(VoltaParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(VoltaParser.OR, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; condTerm();
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 205; Match(OR);
				State = 206; condTerm();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(VoltaParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(VoltaParser.AND, i);
		}
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; condFact();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 213; Match(AND);
				State = 214; condFact();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; expr();
			State = 221; relop();
			State = 222; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(VoltaParser.SUB, 0); }
		public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUB) {
				{
				State = 224; Match(SUB);
				}
			}

			State = 227; term();
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 228; addop();
				State = 229; term();
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 28, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; factor();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MDIV))) != 0)) {
				{
				{
				State = 237; mulop();
				State = 238; factor();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public ITerminalNode NUM() { return GetToken(VoltaParser.NUM, 0); }
		public ITerminalNode CHARCONST() { return GetToken(VoltaParser.CHARCONST, 0); }
		public ITerminalNode TRUE() { return GetToken(VoltaParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(VoltaParser.FALSE, 0); }
		public ITerminalNode NEW() { return GetToken(VoltaParser.NEW, 0); }
		public ITerminalNode IDENT() { return GetToken(VoltaParser.IDENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 30, RULE_factor);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245; designator();
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BL) {
					{
					State = 246; Match(BL);
					State = 248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BL) | (1L << SUB) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT) | (1L << NUM) | (1L << CHARCONST))) != 0)) {
						{
						State = 247; actPars();
						}
					}

					State = 250; Match(BR);
					}
				}

				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253; Match(NUM);
				}
				break;
			case CHARCONST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 254; Match(CHARCONST);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 255;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case NEW:
				EnterOuterAlt(_localctx, 5);
				{
				State = 256; Match(NEW);
				State = 257; Match(IDENT);
				}
				break;
			case BL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 258; Match(BL);
				State = 259; expr();
				State = 260; Match(BR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public ITerminalNode[] IDENT() { return GetTokens(VoltaParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(VoltaParser.IDENT, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(VoltaParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(VoltaParser.DOT, i);
		}
		public ITerminalNode[] SQUAREBL() { return GetTokens(VoltaParser.SQUAREBL); }
		public ITerminalNode SQUAREBL(int i) {
			return GetToken(VoltaParser.SQUAREBL, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] SQUAREBR() { return GetTokens(VoltaParser.SQUAREBR); }
		public ITerminalNode SQUAREBR(int i) {
			return GetToken(VoltaParser.SQUAREBR, i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(IDENT);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SQUAREBL || _la==DOT) {
				{
				State = 271;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 265; Match(DOT);
					State = 266; Match(IDENT);
					}
					break;
				case SQUAREBL:
					{
					State = 267; Match(SQUAREBL);
					State = 268; expr();
					State = 269; Match(SQUAREBR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		public ITerminalNode MUL() { return GetToken(VoltaParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(VoltaParser.DIV, 0); }
		public ITerminalNode MDIV() { return GetToken(VoltaParser.MDIV, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 34, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MDIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(VoltaParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(VoltaParser.SUB, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 36, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public ITerminalNode EQUALEQUAL() { return GetToken(VoltaParser.EQUALEQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(VoltaParser.NOTEQUAL, 0); }
		public ITerminalNode GREATEREQUAL() { return GetToken(VoltaParser.GREATEREQUAL, 0); }
		public ITerminalNode LESSEQUAL() { return GetToken(VoltaParser.LESSEQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(VoltaParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(VoltaParser.LESS, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 38, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALEQUAL) | (1L << NOTEQUAL) | (1L << GREATEREQUAL) | (1L << LESSEQUAL) | (1L << GREATER) | (1L << LESS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\x11D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\x30', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x33', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x37', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', ':', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', 'J', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'M', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'Y', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '^', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', 
		'\x6', '\x62', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x65', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'o', '\n', '\a', '\f', '\a', 
		'\xE', '\a', 'r', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'w', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '~', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x83', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x8E', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x95', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x99', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xA8', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB5', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\xBC', '\n', '\t', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\xC0', '\n', '\n', '\f', '\n', '\xE', '\n', '\xC3', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xCA', '\n', '\v', '\f', '\v', '\xE', '\v', '\xCD', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xD2', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xD5', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\xDA', '\n', '\r', '\f', '\r', '\xE', '\r', '\xDD', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x5', '\xF', '\xE4', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xEA', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\xED', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '\xF3', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\xF6', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xFB', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xFE', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x109', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\a', '\x12', '\x112', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x115', 
		'\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x2', '\x2', '\x16', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '\x2', '\a', 
		'\x3', '\x2', '\x31', '\x32', '\x3', '\x2', '.', '/', '\x3', '\x2', '\x11', 
		'\x13', '\x4', '\x2', '\r', '\r', '\xF', '\xF', '\x4', '\x2', '\x14', 
		'\x17', '\x19', '\x1A', '\x2', '\x134', '\x2', '*', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '>', '\x3', '\x2', '\x2', '\x2', '\x6', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'P', '\x3', '\x2', '\x2', '\x2', '\n', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'h', '\x3', '\x2', '\x2', '\x2', '\xE', 's', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x18', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x108', '\x3', '\x2', '\x2', '\x2', '\"', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x118', '\x3', '\x2', '\x2', '\x2', '(', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\a', '$', '\x2', '\x2', '+', '\x31', '\a', '\x30', 
		'\x2', '\x2', ',', '\x30', '\x5', '\x4', '\x3', '\x2', '-', '\x30', '\x5', 
		'\x6', '\x4', '\x2', '.', '\x30', '\x5', '\b', '\x5', '\x2', '/', ',', 
		'\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x34', '\x38', '\a', '\x1B', '\x2', 
		'\x2', '\x35', '\x37', '\x5', '\n', '\x6', '\x2', '\x36', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\a', '\x1C', '\x2', '\x2', '<', '=', '\a', '\x2', 
		'\x2', '\x3', '=', '\x3', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', 
		'%', '\x2', '\x2', '?', '@', '\x5', '\xE', '\b', '\x2', '@', '\x41', '\a', 
		'\x30', '\x2', '\x2', '\x41', '\x42', '\a', '\x18', '\x2', '\x2', '\x42', 
		'\x43', '\t', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\f', '\x2', 
		'\x2', '\x44', '\x5', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x5', 
		'\xE', '\b', '\x2', '\x46', 'K', '\a', '\x30', '\x2', '\x2', 'G', 'H', 
		'\a', '!', '\x2', '\x2', 'H', 'J', '\a', '\x30', '\x2', '\x2', 'I', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 'K', 
		'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\a', '\f', '\x2', '\x2', 'O', '\a', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\a', '$', '\x2', '\x2', 'Q', 'R', '\a', '\x30', '\x2', '\x2', 
		'R', 'S', '\a', '\x1B', '\x2', '\x2', 'S', 'T', '\x5', '\x6', '\x4', '\x2', 
		'T', 'U', '\a', '\x1C', '\x2', '\x2', 'U', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'Y', '\x5', '\xE', '\b', '\x2', 'W', 'Y', '\a', '+', '\x2', 
		'\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x30', '\x2', 
		'\x2', '[', ']', '\a', '\n', '\x2', '\x2', '\\', '^', '\x5', '\f', '\a', 
		'\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x63', '\a', 
		'\v', '\x2', '\x2', '`', '\x62', '\x5', '\x6', '\x4', '\x2', '\x61', '`', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x66', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x5', '\x12', '\n', '\x2', 'g', 
		'\v', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x5', '\xE', '\b', '\x2', 
		'i', 'p', '\a', '\x30', '\x2', '\x2', 'j', 'k', '\a', '!', '\x2', '\x2', 
		'k', 'l', '\x5', '\xE', '\b', '\x2', 'l', 'm', '\a', '\x30', '\x2', '\x2', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'j', '\x3', '\x2', '\x2', '\x2', 
		'o', 'r', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\a', '\x30', '\x2', 
		'\x2', 't', 'u', '\a', '\x1D', '\x2', '\x2', 'u', 'w', '\a', '\x1E', '\x2', 
		'\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'w', '\xF', '\x3', '\x2', '\x2', '\x2', 'x', '\x82', '\x5', '\"', 
		'\x12', '\x2', 'y', 'z', '\a', '\x18', '\x2', '\x2', 'z', '\x83', '\x5', 
		'\x1C', '\xF', '\x2', '{', '}', '\a', '\n', '\x2', '\x2', '|', '~', '\x5', 
		'\x14', '\v', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x83', '\a', '\v', '\x2', '\x2', '\x80', '\x83', '\a', '\xE', '\x2', 
		'\x2', '\x81', '\x83', '\a', '\x10', '\x2', '\x2', '\x82', 'y', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '{', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', 
		'\f', '\x2', '\x2', '\x85', '\xBC', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\a', '\'', '\x2', '\x2', '\x87', '\x88', '\a', '\n', '\x2', '\x2', 
		'\x88', '\x89', '\x5', '\x16', '\f', '\x2', '\x89', '\x8A', '\a', '\v', 
		'\x2', '\x2', '\x8A', '\x8D', '\x5', '\x10', '\t', '\x2', '\x8B', '\x8C', 
		'\a', '&', '\x2', '\x2', '\x8C', '\x8E', '\x5', '\x10', '\t', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\xBC', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', 
		'\x35', '\x2', '\x2', '\x90', '\x91', '\a', '\n', '\x2', '\x2', '\x91', 
		'\x92', '\x5', '\x1C', '\xF', '\x2', '\x92', '\x94', '\a', '\f', '\x2', 
		'\x2', '\x93', '\x95', '\x5', '\x16', '\f', '\x2', '\x94', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\a', '\f', '\x2', 
		'\x2', '\x97', '\x99', '\x5', '\x10', '\t', '\x2', '\x98', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\v', '\x2', 
		'\x2', '\x9B', '\x9C', '\x5', '\x10', '\t', '\x2', '\x9C', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', ',', '\x2', '\x2', '\x9E', 
		'\x9F', '\a', '\n', '\x2', '\x2', '\x9F', '\xA0', '\x5', '\x16', '\f', 
		'\x2', '\xA0', '\xA1', '\a', '\v', '\x2', '\x2', '\xA1', '\xA2', '\x5', 
		'\x10', '\t', '\x2', '\xA2', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '#', '\x2', '\x2', '\xA4', '\xBC', '\a', '\f', '\x2', '\x2', 
		'\xA5', '\xA7', '\a', '*', '\x2', '\x2', '\xA6', '\xA8', '\x5', '\x1C', 
		'\xF', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\a', ')', '\x2', '\x2', '\xAA', '\xAB', '\a', '\n', '\x2', 
		'\x2', '\xAB', '\xAC', '\x5', '\"', '\x12', '\x2', '\xAC', '\xAD', '\a', 
		'\v', '\x2', '\x2', '\xAD', '\xAE', '\a', '\f', '\x2', '\x2', '\xAE', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '-', '\x2', 
		'\x2', '\xB0', '\xB1', '\a', '\n', '\x2', '\x2', '\xB1', '\xB4', '\x5', 
		'\x1C', '\xF', '\x2', '\xB2', '\xB3', '\a', '!', '\x2', '\x2', '\xB3', 
		'\xB5', '\a', '\x31', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\v', '\x2', '\x2', '\xB7', 
		'\xB8', '\a', '\f', '\x2', '\x2', '\xB8', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBC', '\x5', '\x12', '\n', '\x2', '\xBA', '\xBC', '\a', 
		'\f', '\x2', '\x2', '\xBB', 'x', '\x3', '\x2', '\x2', '\x2', '\xBB', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x11', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC1', 
		'\a', '\x1B', '\x2', '\x2', '\xBE', '\xC0', '\x5', '\x10', '\t', '\x2', 
		'\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x1C', 
		'\x2', '\x2', '\xC5', '\x13', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xCB', 
		'\x5', '\x1C', '\xF', '\x2', '\xC7', '\xC8', '\a', '!', '\x2', '\x2', 
		'\xC8', '\xCA', '\x5', '\x1C', '\xF', '\x2', '\xC9', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xD3', '\x5', '\x18', '\r', '\x2', '\xCF', '\xD0', 
		'\a', '\t', '\x2', '\x2', '\xD0', '\xD2', '\x5', '\x18', '\r', '\x2', 
		'\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDB', '\x5', '\x1A', 
		'\xE', '\x2', '\xD7', '\xD8', '\a', '\b', '\x2', '\x2', '\xD8', '\xDA', 
		'\x5', '\x1A', '\xE', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDF', '\x5', '\x1C', '\xF', '\x2', '\xDF', '\xE0', '\x5', '(', 
		'\x15', '\x2', '\xE0', '\xE1', '\x5', '\x1C', '\xF', '\x2', '\xE1', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\a', '\xF', '\x2', '\x2', 
		'\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xEB', 
		'\x5', '\x1E', '\x10', '\x2', '\xE6', '\xE7', '\x5', '&', '\x14', '\x2', 
		'\xE7', '\xE8', '\x5', '\x1E', '\x10', '\x2', '\xE8', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF4', 
		'\x5', ' ', '\x11', '\x2', '\xEF', '\xF0', '\x5', '$', '\x13', '\x2', 
		'\xF0', '\xF1', '\x5', ' ', '\x11', '\x2', '\xF1', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xFD', 
		'\x5', '\"', '\x12', '\x2', '\xF8', '\xFA', '\a', '\n', '\x2', '\x2', 
		'\xF9', '\xFB', '\x5', '\x14', '\v', '\x2', '\xFA', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\a', '\v', '\x2', '\x2', 
		'\xFD', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x109', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x109', 
		'\a', '\x31', '\x2', '\x2', '\x100', '\x109', '\a', '\x32', '\x2', '\x2', 
		'\x101', '\x109', '\t', '\x3', '\x2', '\x2', '\x102', '\x103', '\a', '(', 
		'\x2', '\x2', '\x103', '\x109', '\a', '\x30', '\x2', '\x2', '\x104', '\x105', 
		'\a', '\n', '\x2', '\x2', '\x105', '\x106', '\x5', '\x1C', '\xF', '\x2', 
		'\x106', '\x107', '\a', '\v', '\x2', '\x2', '\x107', '\x109', '\x3', '\x2', 
		'\x2', '\x2', '\x108', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x108', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x101', '\x3', '\x2', '\x2', '\x2', '\x108', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x104', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x113', '\a', '\x30', '\x2', 
		'\x2', '\x10B', '\x10C', '\a', ' ', '\x2', '\x2', '\x10C', '\x112', '\a', 
		'\x30', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x1D', '\x2', '\x2', '\x10E', 
		'\x10F', '\x5', '\x1C', '\xF', '\x2', '\x10F', '\x110', '\a', '\x1E', 
		'\x2', '\x2', '\x110', '\x112', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x115', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\t', '\x4', '\x2', '\x2', '\x117', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x119', '\t', '\x5', '\x2', '\x2', '\x119', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\t', '\x6', '\x2', 
		'\x2', '\x11B', ')', '\x3', '\x2', '\x2', '\x2', '\x1F', '/', '\x31', 
		'\x38', 'K', 'X', ']', '\x63', 'p', 'v', '}', '\x82', '\x8D', '\x94', 
		'\x98', '\xA7', '\xB4', '\xBB', '\xC1', '\xCB', '\xD3', '\xDB', '\xE3', 
		'\xEB', '\xF4', '\xFA', '\xFD', '\x108', '\x111', '\x113',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Volta.Compiler
