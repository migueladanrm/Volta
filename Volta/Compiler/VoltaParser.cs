//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../Volta.g4//VoltaParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class VoltaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NOT=1, HASH=2, DOLAR=3, AND=4, OR=5, BL=6, BR=7, SEMICOLON=8, ADD=9, ADDADD=10, 
		SUB=11, SUBSUB=12, MUL=13, DIV=14, MDIV=15, EQUALEQUAL=16, NOTEQUAL=17, 
		GREATEREQUAL=18, LESSEQUAL=19, EQUAL=20, GREATER=21, LESS=22, CURLYBL=23, 
		CURLYBR=24, SQUAREBL=25, SQUAREBR=26, COLON=27, DOT=28, COMMA=29, QUESTIONMARK=30, 
		CLASS=31, CONST=32, ELSE=33, IF=34, NEW=35, READ=36, RETURN=37, VOID=38, 
		WHILE=39, WRITE=40, TRUE=41, FALSE=42, FOR=43, SWITCH=44, CASE=45, BREAK=46, 
		DEFAULT=47, IDENT=48, NUM=49, CHARCONST=50, STRING=51, COMMENT=52, WS=53;
	public const int
		RULE_program = 0, RULE_constDecl = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condTerm = 11, 
		RULE_condFact = 12, RULE_expr = 13, RULE_term = 14, RULE_factor = 15, 
		RULE_designator = 16, RULE_mulop = 17, RULE_addop = 18, RULE_relop = 19, 
		RULE_switch = 20, RULE_ident = 21;
	public static readonly string[] ruleNames = {
		"program", "constDecl", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "statement", "block", "actPars", "condition", "condTerm", "condFact", 
		"expr", "term", "factor", "designator", "mulop", "addop", "relop", "switch", 
		"ident"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'#'", "'$'", "'&&'", "'||'", "'('", "')'", "';'", "'+'", 
		"'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'=='", "'!='", "'>='", "'<='", 
		"'='", "'>'", "'<'", "'{'", "'}'", "'['", "']'", "':'", "'.'", "','", 
		"'?'", "'class'", "'const'", "'else'", "'if'", "'new'", "'read'", "'return'", 
		"'void'", "'while'", "'write'", "'true'", "'false'", "'for'", "'switch'", 
		"'case'", "'break'", "'default'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NOT", "HASH", "DOLAR", "AND", "OR", "BL", "BR", "SEMICOLON", "ADD", 
		"ADDADD", "SUB", "SUBSUB", "MUL", "DIV", "MDIV", "EQUALEQUAL", "NOTEQUAL", 
		"GREATEREQUAL", "LESSEQUAL", "EQUAL", "GREATER", "LESS", "CURLYBL", "CURLYBR", 
		"SQUAREBL", "SQUAREBR", "COLON", "DOT", "COMMA", "QUESTIONMARK", "CLASS", 
		"CONST", "ELSE", "IF", "NEW", "READ", "RETURN", "VOID", "WHILE", "WRITE", 
		"TRUE", "FALSE", "FOR", "SWITCH", "CASE", "BREAK", "DEFAULT", "IDENT", 
		"NUM", "CHARCONST", "STRING", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VoltaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VoltaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VoltaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VoltaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramASTContext : ProgramContext {
		public ITerminalNode CLASS() { return GetToken(VoltaParser.CLASS, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode CURLYBL() { return GetToken(VoltaParser.CURLYBL, 0); }
		public ITerminalNode CURLYBR() { return GetToken(VoltaParser.CURLYBR, 0); }
		public ITerminalNode Eof() { return GetToken(VoltaParser.Eof, 0); }
		public ConstDeclContext[] constDecl() {
			return GetRuleContexts<ConstDeclContext>();
		}
		public ConstDeclContext constDecl(int i) {
			return GetRuleContext<ConstDeclContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramASTContext(ProgramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterProgramAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitProgramAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new ProgramASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(CLASS);
			State = 45; ident();
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << CONST) | (1L << IDENT))) != 0)) {
				{
				State = 49;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONST:
					{
					State = 46; constDecl();
					}
					break;
				case IDENT:
					{
					State = 47; varDecl();
					}
					break;
				case CLASS:
					{
					State = 48; classDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54; Match(CURLYBL);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VOID || _la==IDENT) {
				{
				{
				State = 55; methodDecl();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61; Match(CURLYBR);
			State = 62; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
	 
		public ConstDeclContext() { }
		public virtual void CopyFrom(ConstDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstDeclASTContext : ConstDeclContext {
		public ITerminalNode CONST() { return GetToken(VoltaParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(VoltaParser.EQUAL, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public ITerminalNode NUM() { return GetToken(VoltaParser.NUM, 0); }
		public ITerminalNode CHARCONST() { return GetToken(VoltaParser.CHARCONST, 0); }
		public ITerminalNode STRING() { return GetToken(VoltaParser.STRING, 0); }
		public ConstDeclASTContext(ConstDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterConstDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitConstDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 2, RULE_constDecl);
		int _la;
		try {
			_localctx = new ConstDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(CONST);
			State = 65; type();
			State = 66; ident();
			State = 67; Match(EQUAL);
			State = 68;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUM) | (1L << CHARCONST) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 69; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDeclASTContext : VarDeclContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VoltaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VoltaParser.COMMA, i);
		}
		public VarDeclASTContext(VarDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterVarDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitVarDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			_localctx = new VarDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; type();
			State = 72; ident();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 73; Match(COMMA);
				State = 74; ident();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	 
		public ClassDeclContext() { }
		public virtual void CopyFrom(ClassDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclASTContext : ClassDeclContext {
		public ITerminalNode CLASS() { return GetToken(VoltaParser.CLASS, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode CURLYBL() { return GetToken(VoltaParser.CURLYBL, 0); }
		public ITerminalNode CURLYBR() { return GetToken(VoltaParser.CURLYBR, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclASTContext(ClassDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterClassDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitClassDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			_localctx = new ClassDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(CLASS);
			State = 83; ident();
			State = 84; Match(CURLYBL);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENT) {
				{
				{
				State = 85; varDecl();
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91; Match(CURLYBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	 
		public MethodDeclContext() { }
		public virtual void CopyFrom(MethodDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodDeclASTContext : MethodDeclContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(VoltaParser.VOID, 0); }
		public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public MethodDeclASTContext(MethodDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			_localctx = new MethodDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 93; type();
				}
				break;
			case VOID:
				{
				State = 94; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 97; ident();
			State = 98; Match(BL);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 99; formPars();
				}
			}

			State = 102; Match(BR);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENT) {
				{
				{
				State = 103; varDecl();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	 
		public FormParsContext() { }
		public virtual void CopyFrom(FormParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FormParsASTContext : FormParsContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VoltaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VoltaParser.COMMA, i);
		}
		public FormParsASTContext(FormParsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterFormParsAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitFormParsAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			_localctx = new FormParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; type();
			State = 112; ident();
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				{
				State = 113; Match(COMMA);
				}
				State = 114; type();
				State = 115; ident();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeASTContext : TypeContext {
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode SQUAREBL() { return GetToken(VoltaParser.SQUAREBL, 0); }
		public ITerminalNode SQUAREBR() { return GetToken(VoltaParser.SQUAREBR, 0); }
		public TypeASTContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterTypeAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitTypeAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			_localctx = new TypeASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; ident();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQUAREBL) {
				{
				State = 123; Match(SQUAREBL);
				State = 124; Match(SQUAREBR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatementASTContext : StatementContext {
		public ITerminalNode WHILE() { return GetToken(VoltaParser.WHILE, 0); }
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SemicolonStatementASTContext : StatementContext {
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public SemicolonStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterSemicolonStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitSemicolonStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemicolonStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStatementASTContext : StatementContext {
		public ITerminalNode READ() { return GetToken(VoltaParser.READ, 0); }
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public ReadStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterReadStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitReadStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementASTContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(VoltaParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterReturnStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitReturnStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementASTContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(VoltaParser.FOR, 0); }
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VoltaParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VoltaParser.SEMICOLON, i);
		}
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ForStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterForStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitForStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementASTContext : StatementContext {
		public ITerminalNode BREAK() { return GetToken(VoltaParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public BreakStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterBreakStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitBreakStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementASTContext : StatementContext {
		public ITerminalNode IF() { return GetToken(VoltaParser.IF, 0); }
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(VoltaParser.ELSE, 0); }
		public IfStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterIfStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitIfStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteStatementASTContext : StatementContext {
		public ITerminalNode WRITE() { return GetToken(VoltaParser.WRITE, 0); }
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public ITerminalNode COMMA() { return GetToken(VoltaParser.COMMA, 0); }
		public ITerminalNode NUM() { return GetToken(VoltaParser.NUM, 0); }
		public WriteStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterWriteStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitWriteStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementASTContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterBlockStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitBlockStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallORassignStatementASTContext : StatementContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(VoltaParser.SEMICOLON, 0); }
		public ITerminalNode EQUAL() { return GetToken(VoltaParser.EQUAL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public ITerminalNode ADDADD() { return GetToken(VoltaParser.ADDADD, 0); }
		public ITerminalNode SUBSUB() { return GetToken(VoltaParser.SUBSUB, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public CallORassignStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterCallORassignStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitCallORassignStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallORassignStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SwitchStatementASTContext : StatementContext {
		public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public SwitchStatementASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatementAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatementAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatementAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				_localctx = new CallORassignStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 127; designator();
				State = 137;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EQUAL:
					{
					State = 128; Match(EQUAL);
					State = 129; expr();
					}
					break;
				case BL:
					{
					State = 130; Match(BL);
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BL) | (1L << SUB) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT) | (1L << NUM) | (1L << CHARCONST) | (1L << STRING))) != 0)) {
						{
						State = 131; actPars();
						}
					}

					State = 134; Match(BR);
					}
					break;
				case ADDADD:
					{
					State = 135; Match(ADDADD);
					}
					break;
				case SUBSUB:
					{
					State = 136; Match(SUBSUB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 139; Match(SEMICOLON);
				}
				break;
			case IF:
				_localctx = new IfStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; Match(IF);
				State = 142; Match(BL);
				State = 143; condition();
				State = 144; Match(BR);
				State = 145; statement();
				State = 148;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 146; Match(ELSE);
					State = 147; statement();
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new ForStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 150; Match(FOR);
				State = 151; Match(BL);
				State = 152; expr();
				State = 153; Match(SEMICOLON);
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BL) | (1L << SUB) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT) | (1L << NUM) | (1L << CHARCONST) | (1L << STRING))) != 0)) {
					{
					State = 154; condition();
					}
				}

				State = 157; Match(SEMICOLON);
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << CURLYBL) | (1L << IF) | (1L << READ) | (1L << RETURN) | (1L << WHILE) | (1L << WRITE) | (1L << FOR) | (1L << SWITCH) | (1L << BREAK) | (1L << IDENT))) != 0)) {
					{
					State = 158; statement();
					}
				}

				State = 161; Match(BR);
				State = 162; statement();
				}
				break;
			case WHILE:
				_localctx = new WhileStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 164; Match(WHILE);
				State = 165; Match(BL);
				State = 166; condition();
				State = 167; Match(BR);
				State = 168; statement();
				}
				break;
			case BREAK:
				_localctx = new BreakStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 170; Match(BREAK);
				State = 171; Match(SEMICOLON);
				}
				break;
			case SWITCH:
				_localctx = new SwitchStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 172; @switch();
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 173; Match(RETURN);
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BL) | (1L << SUB) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT) | (1L << NUM) | (1L << CHARCONST) | (1L << STRING))) != 0)) {
					{
					State = 174; expr();
					}
				}

				State = 177; Match(SEMICOLON);
				}
				break;
			case READ:
				_localctx = new ReadStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 178; Match(READ);
				State = 179; Match(BL);
				State = 180; designator();
				State = 181; Match(BR);
				State = 182; Match(SEMICOLON);
				}
				break;
			case WRITE:
				_localctx = new WriteStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 184; Match(WRITE);
				State = 185; Match(BL);
				State = 186; expr();
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 187; Match(COMMA);
					State = 188; Match(NUM);
					}
				}

				State = 191; Match(BR);
				State = 192; Match(SEMICOLON);
				}
				break;
			case CURLYBL:
				_localctx = new BlockStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 194; block();
				}
				break;
			case SEMICOLON:
				_localctx = new SemicolonStatementASTContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 195; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockASTContext : BlockContext {
		public ITerminalNode CURLYBL() { return GetToken(VoltaParser.CURLYBL, 0); }
		public ITerminalNode CURLYBR() { return GetToken(VoltaParser.CURLYBR, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConstDeclContext[] constDecl() {
			return GetRuleContexts<ConstDeclContext>();
		}
		public ConstDeclContext constDecl(int i) {
			return GetRuleContext<ConstDeclContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public BlockASTContext(BlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterBlockAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitBlockAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			_localctx = new BlockASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(CURLYBL);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << CURLYBL) | (1L << CONST) | (1L << IF) | (1L << READ) | (1L << RETURN) | (1L << WHILE) | (1L << WRITE) | (1L << FOR) | (1L << SWITCH) | (1L << BREAK) | (1L << IDENT))) != 0)) {
				{
				State = 202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 199; statement();
					}
					break;
				case 2:
					{
					State = 200; constDecl();
					}
					break;
				case 3:
					{
					State = 201; varDecl();
					}
					break;
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207; Match(CURLYBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	 
		public ActParsContext() { }
		public virtual void CopyFrom(ActParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ActParsASTContext : ActParsContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VoltaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VoltaParser.COMMA, i);
		}
		public ActParsASTContext(ActParsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterActParsAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitActParsAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(Context, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			_localctx = new ActParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; expr();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 210; Match(COMMA);
				State = 211; expr();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionASTContext : ConditionContext {
		public CondTermContext[] condTerm() {
			return GetRuleContexts<CondTermContext>();
		}
		public CondTermContext condTerm(int i) {
			return GetRuleContext<CondTermContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(VoltaParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(VoltaParser.OR, i);
		}
		public ConditionASTContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterConditionAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitConditionAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			_localctx = new ConditionASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; condTerm();
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 218; Match(OR);
				State = 219; condTerm();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondTermContext : ParserRuleContext {
		public CondTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condTerm; } }
	 
		public CondTermContext() { }
		public virtual void CopyFrom(CondTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondTermASTContext : CondTermContext {
		public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(VoltaParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(VoltaParser.AND, i);
		}
		public CondTermASTContext(CondTermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterCondTermAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitCondTermAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondTermContext condTerm() {
		CondTermContext _localctx = new CondTermContext(Context, State);
		EnterRule(_localctx, 22, RULE_condTerm);
		int _la;
		try {
			_localctx = new CondTermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; condFact();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 226; Match(AND);
				State = 227; condFact();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	 
		public CondFactContext() { }
		public virtual void CopyFrom(CondFactContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondFactASTContext : CondFactContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactASTContext(CondFactContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterCondFactAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitCondFactAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFactAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(Context, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			_localctx = new CondFactASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; expr();
			State = 234; relop();
			State = 235; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprASTContext : ExprContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(VoltaParser.SUB, 0); }
		public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprASTContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterExprAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitExprAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_expr);
		int _la;
		try {
			_localctx = new ExprASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUB) {
				{
				State = 237; Match(SUB);
				}
			}

			State = 240; term();
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 241; addop();
				State = 242; term();
				}
				}
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermASTContext : TermContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermASTContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterTermAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitTermAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 28, RULE_term);
		int _la;
		try {
			_localctx = new TermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; factor();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MDIV))) != 0)) {
				{
				{
				State = 250; mulop();
				State = 251; factor();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallFactorASTContext : FactorContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public CallFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterCallFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitCallFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewFactorASTContext : FactorContext {
		public ITerminalNode NEW() { return GetToken(VoltaParser.NEW, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public NewFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterNewFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitNewFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumFactorASTContext : FactorContext {
		public ITerminalNode NUM() { return GetToken(VoltaParser.NUM, 0); }
		public NumFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterNumFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitNumFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharConstFactorASTContext : FactorContext {
		public ITerminalNode CHARCONST() { return GetToken(VoltaParser.CHARCONST, 0); }
		public CharConstFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterCharConstFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitCharConstFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharConstFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFactorASTContext : FactorContext {
		public ITerminalNode STRING() { return GetToken(VoltaParser.STRING, 0); }
		public StringFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterStringFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitStringFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BolleanFactorASTContext : FactorContext {
		public ITerminalNode TRUE() { return GetToken(VoltaParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(VoltaParser.FALSE, 0); }
		public BolleanFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterBolleanFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitBolleanFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBolleanFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketFactorASTContext : FactorContext {
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public BracketFactorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterBracketFactorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitBracketFactorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketFactorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 30, RULE_factor);
		int _la;
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				_localctx = new CallFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; designator();
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BL) {
					{
					State = 259; Match(BL);
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BL) | (1L << SUB) | (1L << NEW) | (1L << TRUE) | (1L << FALSE) | (1L << IDENT) | (1L << NUM) | (1L << CHARCONST) | (1L << STRING))) != 0)) {
						{
						State = 260; actPars();
						}
					}

					State = 263; Match(BR);
					}
				}

				}
				break;
			case NUM:
				_localctx = new NumFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; Match(NUM);
				}
				break;
			case CHARCONST:
				_localctx = new CharConstFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 267; Match(CHARCONST);
				}
				break;
			case STRING:
				_localctx = new StringFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 268; Match(STRING);
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BolleanFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 269;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case NEW:
				_localctx = new NewFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 270; Match(NEW);
				State = 271; ident();
				}
				break;
			case BL:
				_localctx = new BracketFactorASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 272; Match(BL);
				State = 273; expr();
				State = 274; Match(BR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	 
		public DesignatorContext() { }
		public virtual void CopyFrom(DesignatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DesignatorASTContext : DesignatorContext {
		public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(VoltaParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(VoltaParser.DOT, i);
		}
		public ITerminalNode[] SQUAREBL() { return GetTokens(VoltaParser.SQUAREBL); }
		public ITerminalNode SQUAREBL(int i) {
			return GetToken(VoltaParser.SQUAREBL, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] SQUAREBR() { return GetTokens(VoltaParser.SQUAREBR); }
		public ITerminalNode SQUAREBR(int i) {
			return GetToken(VoltaParser.SQUAREBR, i);
		}
		public DesignatorASTContext(DesignatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterDesignatorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitDesignatorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_designator);
		int _la;
		try {
			_localctx = new DesignatorASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; ident();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SQUAREBL || _la==DOT) {
				{
				State = 285;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 279; Match(DOT);
					State = 280; ident();
					}
					break;
				case SQUAREBL:
					{
					State = 281; Match(SQUAREBL);
					State = 282; expr();
					State = 283; Match(SQUAREBR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		public ITerminalNode MUL() { return GetToken(VoltaParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(VoltaParser.DIV, 0); }
		public ITerminalNode MDIV() { return GetToken(VoltaParser.MDIV, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(Context, State);
		EnterRule(_localctx, 34, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MDIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
	 
		public AddopContext() { }
		public virtual void CopyFrom(AddopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddopASTContext : AddopContext {
		public ITerminalNode ADD() { return GetToken(VoltaParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(VoltaParser.SUB, 0); }
		public AddopASTContext(AddopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterAddopAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitAddopAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddopAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(Context, State);
		EnterRule(_localctx, 36, RULE_addop);
		int _la;
		try {
			_localctx = new AddopASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
	 
		public RelopContext() { }
		public virtual void CopyFrom(RelopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GreaterRelopASTContext : RelopContext {
		public ITerminalNode GREATER() { return GetToken(VoltaParser.GREATER, 0); }
		public GreaterRelopASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterGreaterRelopAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitGreaterRelopAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterRelopAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualEqualRelopASTContext : RelopContext {
		public ITerminalNode EQUALEQUAL() { return GetToken(VoltaParser.EQUALEQUAL, 0); }
		public EqualEqualRelopASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterEqualEqualRelopAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitEqualEqualRelopAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualEqualRelopAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessRelopASTContext : RelopContext {
		public ITerminalNode LESS() { return GetToken(VoltaParser.LESS, 0); }
		public LessRelopASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterLessRelopAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitLessRelopAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessRelopAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqualRelopASTContext : RelopContext {
		public ITerminalNode GREATEREQUAL() { return GetToken(VoltaParser.GREATEREQUAL, 0); }
		public GreaterEqualRelopASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterGreaterEqualRelopAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitGreaterEqualRelopAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEqualRelopAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualRelopASTContext : RelopContext {
		public ITerminalNode NOTEQUAL() { return GetToken(VoltaParser.NOTEQUAL, 0); }
		public NotEqualRelopASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterNotEqualRelopAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitNotEqualRelopAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualRelopAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessEqualRelopASTContext : RelopContext {
		public ITerminalNode LESSEQUAL() { return GetToken(VoltaParser.LESSEQUAL, 0); }
		public LessEqualRelopASTContext(RelopContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterLessEqualRelopAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitLessEqualRelopAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessEqualRelopAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 38, RULE_relop);
		try {
			State = 300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUALEQUAL:
				_localctx = new EqualEqualRelopASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; Match(EQUALEQUAL);
				}
				break;
			case NOTEQUAL:
				_localctx = new NotEqualRelopASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; Match(NOTEQUAL);
				}
				break;
			case GREATEREQUAL:
				_localctx = new GreaterEqualRelopASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 296; Match(GREATEREQUAL);
				}
				break;
			case LESSEQUAL:
				_localctx = new LessEqualRelopASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 297; Match(LESSEQUAL);
				}
				break;
			case GREATER:
				_localctx = new GreaterRelopASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 298; Match(GREATER);
				}
				break;
			case LESS:
				_localctx = new LessRelopASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 299; Match(LESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
	 
		public SwitchContext() { }
		public virtual void CopyFrom(SwitchContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchASTContext : SwitchContext {
		public ITerminalNode SWITCH() { return GetToken(VoltaParser.SWITCH, 0); }
		public ITerminalNode BL() { return GetToken(VoltaParser.BL, 0); }
		public ITerminalNode BR() { return GetToken(VoltaParser.BR, 0); }
		public ITerminalNode CURLYBL() { return GetToken(VoltaParser.CURLYBL, 0); }
		public ITerminalNode CURLYBR() { return GetToken(VoltaParser.CURLYBR, 0); }
		public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ITerminalNode[] NUM() { return GetTokens(VoltaParser.NUM); }
		public ITerminalNode NUM(int i) {
			return GetToken(VoltaParser.NUM, i);
		}
		public ITerminalNode[] CHARCONST() { return GetTokens(VoltaParser.CHARCONST); }
		public ITerminalNode CHARCONST(int i) {
			return GetToken(VoltaParser.CHARCONST, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(VoltaParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(VoltaParser.STRING, i);
		}
		public ITerminalNode[] CASE() { return GetTokens(VoltaParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(VoltaParser.CASE, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(VoltaParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(VoltaParser.COLON, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(VoltaParser.DEFAULT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] BREAK() { return GetTokens(VoltaParser.BREAK); }
		public ITerminalNode BREAK(int i) {
			return GetToken(VoltaParser.BREAK, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VoltaParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VoltaParser.SEMICOLON, i);
		}
		public SwitchASTContext(SwitchContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterSwitchAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitSwitchAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 40, RULE_switch);
		int _la;
		try {
			_localctx = new SwitchASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(SWITCH);
			State = 303; Match(BL);
			State = 308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 304; ident();
				}
				break;
			case NUM:
				{
				State = 305; Match(NUM);
				}
				break;
			case CHARCONST:
				{
				State = 306; Match(CHARCONST);
				}
				break;
			case STRING:
				{
				State = 307; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 310; Match(BR);
			State = 311; Match(CURLYBL);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE) {
				{
				{
				State = 312; Match(CASE);
				State = 313;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUM) | (1L << CHARCONST) | (1L << STRING))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 314; Match(COLON);
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << CURLYBL) | (1L << IF) | (1L << READ) | (1L << RETURN) | (1L << WHILE) | (1L << WRITE) | (1L << FOR) | (1L << SWITCH) | (1L << BREAK) | (1L << IDENT))) != 0)) {
					{
					State = 315; statement();
					State = 318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BREAK) {
						{
						State = 316; Match(BREAK);
						State = 317; Match(SEMICOLON);
						}
					}

					}
				}

				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 327; Match(DEFAULT);
				State = 328; Match(COLON);
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMICOLON) | (1L << CURLYBL) | (1L << IF) | (1L << READ) | (1L << RETURN) | (1L << WHILE) | (1L << WRITE) | (1L << FOR) | (1L << SWITCH) | (1L << BREAK) | (1L << IDENT))) != 0)) {
					{
					State = 329; statement();
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BREAK) {
						{
						State = 330; Match(BREAK);
						State = 331; Match(SEMICOLON);
						}
					}

					}
				}

				}
			}

			State = 338; Match(CURLYBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		public ParserRuleContext decl = null;
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
	 
		public IdentContext() { }
		public virtual void CopyFrom(IdentContext context) {
			base.CopyFrom(context);
			this.decl = context.decl;
		}
	}
	public partial class IdentASTContext : IdentContext {
		public ITerminalNode IDENT() { return GetToken(VoltaParser.IDENT, 0); }
		public IdentASTContext(IdentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.EnterIdentAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVoltaParserListener typedListener = listener as IVoltaParserListener;
			if (typedListener != null) typedListener.ExitIdentAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVoltaParserVisitor<TResult> typedVisitor = visitor as IVoltaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 42, RULE_ident);
		try {
			_localctx = new IdentASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x37', '\x159', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', ';', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'>', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', 'N', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'Q', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', 'Y', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\\', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x62', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'g', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', 
		'\x6', 'k', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'n', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'x', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '{', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x80', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x87', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x8C', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x97', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x9E', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xA2', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB2', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xC0', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xC7', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xCD', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xD0', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xD7', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xDA', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\xDF', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\xE2', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\xE7', '\n', '\r', '\f', '\r', '\xE', '\r', '\xEA', '\v', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x5', '\xF', '\xF1', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\xF7', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\xFA', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\x100', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\x103', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x108', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x10B', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x117', '\n', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\x120', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\x123', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x12F', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x137', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x141', '\n', '\x16', '\x5', '\x16', '\x143', 
		'\n', '\x16', '\a', '\x16', '\x145', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x148', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x14F', '\n', '\x16', '\x5', 
		'\x16', '\x151', '\n', '\x16', '\x5', '\x16', '\x153', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x2', 
		'\x2', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '\x2', '\x6', '\x3', '\x2', '\x33', '\x35', '\x3', '\x2', '+', 
		',', '\x3', '\x2', '\xF', '\x11', '\x4', '\x2', '\v', '\v', '\r', '\r', 
		'\x2', '\x181', '\x2', '.', '\x3', '\x2', '\x2', '\x2', '\x4', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'I', '\x3', '\x2', '\x2', '\x2', '\b', 
		'T', '\x3', '\x2', '\x2', '\x2', '\n', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'q', '\x3', '\x2', '\x2', '\x2', '\xE', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x12', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\x18', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xFB', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\"', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x124', '\x3', '\x2', '\x2', '\x2', '&', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x12E', '\x3', '\x2', '\x2', '\x2', '*', '\x130', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\a', '!', '\x2', '\x2', '/', '\x35', '\x5', ',', '\x17', '\x2', 
		'\x30', '\x34', '\x5', '\x4', '\x3', '\x2', '\x31', '\x34', '\x5', '\x6', 
		'\x4', '\x2', '\x32', '\x34', '\x5', '\b', '\x5', '\x2', '\x33', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '<', '\a', '\x19', 
		'\x2', '\x2', '\x39', ';', '\x5', '\n', '\x6', '\x2', ':', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '?', '\x3', 
		'\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', 
		'\x1A', '\x2', '\x2', '@', '\x41', '\a', '\x2', '\x2', '\x3', '\x41', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', '\"', '\x2', 
		'\x2', '\x43', '\x44', '\x5', '\xE', '\b', '\x2', '\x44', '\x45', '\x5', 
		',', '\x17', '\x2', '\x45', '\x46', '\a', '\x16', '\x2', '\x2', '\x46', 
		'G', '\t', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\n', '\x2', '\x2', 'H', 
		'\x5', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', '\xE', '\b', '\x2', 
		'J', 'O', '\x5', ',', '\x17', '\x2', 'K', 'L', '\a', '\x1F', '\x2', '\x2', 
		'L', 'N', '\x5', ',', '\x17', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\n', '\x2', '\x2', 
		'S', '\a', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '!', '\x2', '\x2', 
		'U', 'V', '\x5', ',', '\x17', '\x2', 'V', 'Z', '\a', '\x19', '\x2', '\x2', 
		'W', 'Y', '\x5', '\x6', '\x4', '\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x1A', 
		'\x2', '\x2', '^', '\t', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x5', 
		'\xE', '\b', '\x2', '`', '\x62', '\a', '(', '\x2', '\x2', '\x61', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', ',', '\x17', 
		'\x2', '\x64', '\x66', '\a', '\b', '\x2', '\x2', '\x65', 'g', '\x5', '\f', 
		'\a', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 
		'l', '\a', '\t', '\x2', '\x2', 'i', 'k', '\x5', '\x6', '\x4', '\x2', 'j', 
		'i', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x5', '\x12', '\n', '\x2', 'p', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x5', '\xE', '\b', '\x2', 'r', 'y', '\x5', ',', '\x17', 
		'\x2', 's', 't', '\a', '\x1F', '\x2', '\x2', 't', 'u', '\x5', '\xE', '\b', 
		'\x2', 'u', 'v', '\x5', ',', '\x17', '\x2', 'v', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'w', 's', '\x3', '\x2', '\x2', '\x2', 'x', '{', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'z', '\r', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x7F', '\x5', ',', '\x17', '\x2', '}', '~', '\a', 
		'\x1B', '\x2', '\x2', '~', '\x80', '\a', '\x1C', '\x2', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\xF', '\x3', '\x2', '\x2', '\x2', '\x81', '\x8B', '\x5', 
		'\"', '\x12', '\x2', '\x82', '\x83', '\a', '\x16', '\x2', '\x2', '\x83', 
		'\x8C', '\x5', '\x1C', '\xF', '\x2', '\x84', '\x86', '\a', '\b', '\x2', 
		'\x2', '\x85', '\x87', '\x5', '\x14', '\v', '\x2', '\x86', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8C', '\a', '\t', '\x2', 
		'\x2', '\x89', '\x8C', '\a', '\f', '\x2', '\x2', '\x8A', '\x8C', '\a', 
		'\xE', '\x2', '\x2', '\x8B', '\x82', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\n', '\x2', '\x2', '\x8E', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '$', '\x2', 
		'\x2', '\x90', '\x91', '\a', '\b', '\x2', '\x2', '\x91', '\x92', '\x5', 
		'\x16', '\f', '\x2', '\x92', '\x93', '\a', '\t', '\x2', '\x2', '\x93', 
		'\x96', '\x5', '\x10', '\t', '\x2', '\x94', '\x95', '\a', '#', '\x2', 
		'\x2', '\x95', '\x97', '\x5', '\x10', '\t', '\x2', '\x96', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '-', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\b', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		'\x1C', '\xF', '\x2', '\x9B', '\x9D', '\a', '\n', '\x2', '\x2', '\x9C', 
		'\x9E', '\x5', '\x16', '\f', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA1', '\a', '\n', '\x2', '\x2', '\xA0', 
		'\xA2', '\x5', '\x10', '\t', '\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\t', '\x2', '\x2', '\xA4', 
		'\xA5', '\x5', '\x10', '\t', '\x2', '\xA5', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', ')', '\x2', '\x2', '\xA7', '\xA8', '\a', 
		'\b', '\x2', '\x2', '\xA8', '\xA9', '\x5', '\x16', '\f', '\x2', '\xA9', 
		'\xAA', '\a', '\t', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\x10', '\t', 
		'\x2', '\xAB', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', 
		'\x30', '\x2', '\x2', '\xAD', '\xC7', '\a', '\n', '\x2', '\x2', '\xAE', 
		'\xC7', '\x5', '*', '\x16', '\x2', '\xAF', '\xB1', '\a', '\'', '\x2', 
		'\x2', '\xB0', '\xB2', '\x5', '\x1C', '\xF', '\x2', '\xB1', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xC7', '\a', '\n', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', '&', '\x2', '\x2', '\xB5', '\xB6', '\a', 
		'\b', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\"', '\x12', '\x2', '\xB7', 
		'\xB8', '\a', '\t', '\x2', '\x2', '\xB8', '\xB9', '\a', '\n', '\x2', '\x2', 
		'\xB9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '*', 
		'\x2', '\x2', '\xBB', '\xBC', '\a', '\b', '\x2', '\x2', '\xBC', '\xBF', 
		'\x5', '\x1C', '\xF', '\x2', '\xBD', '\xBE', '\a', '\x1F', '\x2', '\x2', 
		'\xBE', '\xC0', '\a', '\x33', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\t', '\x2', '\x2', 
		'\xC2', '\xC3', '\a', '\n', '\x2', '\x2', '\xC3', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC7', '\x5', '\x12', '\n', '\x2', '\xC5', '\xC7', 
		'\a', '\n', '\x2', '\x2', '\xC6', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x8F', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\x11', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCE', '\a', '\x19', 
		'\x2', '\x2', '\xC9', '\xCD', '\x5', '\x10', '\t', '\x2', '\xCA', '\xCD', 
		'\x5', '\x4', '\x3', '\x2', '\xCB', '\xCD', '\x5', '\x6', '\x4', '\x2', 
		'\xCC', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', 
		'\a', '\x1A', '\x2', '\x2', '\xD2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xD3', '\xD8', '\x5', '\x1C', '\xF', '\x2', '\xD4', '\xD5', '\a', '\x1F', 
		'\x2', '\x2', '\xD5', '\xD7', '\x5', '\x1C', '\xF', '\x2', '\xD6', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\x15', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xE0', '\x5', '\x18', '\r', '\x2', 
		'\xDC', '\xDD', '\a', '\a', '\x2', '\x2', '\xDD', '\xDF', '\x5', '\x18', 
		'\r', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE8', 
		'\x5', '\x1A', '\xE', '\x2', '\xE4', '\xE5', '\a', '\x6', '\x2', '\x2', 
		'\xE5', '\xE7', '\x5', '\x1A', '\xE', '\x2', '\xE6', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\x19', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\x5', '\x1C', '\xF', '\x2', '\xEC', '\xED', 
		'\x5', '(', '\x15', '\x2', '\xED', '\xEE', '\x5', '\x1C', '\xF', '\x2', 
		'\xEE', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\a', '\r', 
		'\x2', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF8', '\x5', '\x1E', '\x10', '\x2', '\xF3', '\xF4', '\x5', '&', 
		'\x14', '\x2', '\xF4', '\xF5', '\x5', '\x1E', '\x10', '\x2', '\xF5', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\x101', '\x5', ' ', '\x11', '\x2', '\xFC', '\xFD', '\x5', '$', 
		'\x13', '\x2', '\xFD', '\xFE', '\x5', ' ', '\x11', '\x2', '\xFE', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x103', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x10A', '\x5', '\"', '\x12', '\x2', '\x105', '\x107', 
		'\a', '\b', '\x2', '\x2', '\x106', '\x108', '\x5', '\x14', '\v', '\x2', 
		'\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10B', '\a', '\t', '\x2', '\x2', '\x10A', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x117', '\a', '\x33', '\x2', '\x2', 
		'\x10D', '\x117', '\a', '\x34', '\x2', '\x2', '\x10E', '\x117', '\a', 
		'\x35', '\x2', '\x2', '\x10F', '\x117', '\t', '\x3', '\x2', '\x2', '\x110', 
		'\x111', '\a', '%', '\x2', '\x2', '\x111', '\x117', '\x5', ',', '\x17', 
		'\x2', '\x112', '\x113', '\a', '\b', '\x2', '\x2', '\x113', '\x114', '\x5', 
		'\x1C', '\xF', '\x2', '\x114', '\x115', '\a', '\t', '\x2', '\x2', '\x115', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x116', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x116', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x116', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x112', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x118', '\x121', '\x5', ',', '\x17', 
		'\x2', '\x119', '\x11A', '\a', '\x1E', '\x2', '\x2', '\x11A', '\x120', 
		'\x5', ',', '\x17', '\x2', '\x11B', '\x11C', '\a', '\x1B', '\x2', '\x2', 
		'\x11C', '\x11D', '\x5', '\x1C', '\xF', '\x2', '\x11D', '\x11E', '\a', 
		'\x1C', '\x2', '\x2', '\x11E', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x123', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '#', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', 
		'\x2', '\x2', '\x124', '\x125', '\t', '\x4', '\x2', '\x2', '\x125', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\t', '\x5', '\x2', '\x2', 
		'\x127', '\'', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12F', '\a', '\x12', 
		'\x2', '\x2', '\x129', '\x12F', '\a', '\x13', '\x2', '\x2', '\x12A', '\x12F', 
		'\a', '\x14', '\x2', '\x2', '\x12B', '\x12F', '\a', '\x15', '\x2', '\x2', 
		'\x12C', '\x12F', '\a', '\x17', '\x2', '\x2', '\x12D', '\x12F', '\a', 
		'\x18', '\x2', '\x2', '\x12E', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', ')', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\a', '.', 
		'\x2', '\x2', '\x131', '\x136', '\a', '\b', '\x2', '\x2', '\x132', '\x137', 
		'\x5', ',', '\x17', '\x2', '\x133', '\x137', '\a', '\x33', '\x2', '\x2', 
		'\x134', '\x137', '\a', '\x34', '\x2', '\x2', '\x135', '\x137', '\a', 
		'\x35', '\x2', '\x2', '\x136', '\x132', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\a', '\t', '\x2', '\x2', 
		'\x139', '\x146', '\a', '\x19', '\x2', '\x2', '\x13A', '\x13B', '\a', 
		'/', '\x2', '\x2', '\x13B', '\x13C', '\t', '\x2', '\x2', '\x2', '\x13C', 
		'\x142', '\a', '\x1D', '\x2', '\x2', '\x13D', '\x140', '\x5', '\x10', 
		'\t', '\x2', '\x13E', '\x13F', '\a', '\x30', '\x2', '\x2', '\x13F', '\x141', 
		'\a', '\n', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x145', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14A', '\a', '\x31', '\x2', '\x2', '\x14A', '\x150', '\a', '\x1D', '\x2', 
		'\x2', '\x14B', '\x14E', '\x5', '\x10', '\t', '\x2', '\x14C', '\x14D', 
		'\a', '\x30', '\x2', '\x2', '\x14D', '\x14F', '\a', '\n', '\x2', '\x2', 
		'\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x151', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x153', '\x3', '\x2', '\x2', '\x2', '\x152', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x153', '\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\a', 
		'\x1A', '\x2', '\x2', '\x155', '+', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x157', '\a', '\x32', '\x2', '\x2', '\x157', '-', '\x3', '\x2', '\x2', 
		'\x2', ')', '\x33', '\x35', '<', 'O', 'Z', '\x61', '\x66', 'l', 'y', '\x7F', 
		'\x86', '\x8B', '\x96', '\x9D', '\xA1', '\xB1', '\xBF', '\xC6', '\xCC', 
		'\xCE', '\xD8', '\xE0', '\xE8', '\xF0', '\xF8', '\x101', '\x107', '\x10A', 
		'\x116', '\x11F', '\x121', '\x12E', '\x136', '\x140', '\x142', '\x146', 
		'\x14E', '\x150', '\x152',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
